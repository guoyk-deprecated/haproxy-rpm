diff -ruN ./include/types/global.h ../haproxy-1.8.7-70bd7a-1/include/types/global.h
--- ./include/types/global.h	2018-04-07 06:30:56.000000000 +0800
+++ ../haproxy-1.8.7-70bd7a-1/include/types/global.h	2018-04-09 16:26:50.000000000 +0800
@@ -87,6 +87,7 @@
 struct global {
 	int uid;
 	int gid;
+	unsigned long riid;
 	int external_check;
 	int nbproc;
 	int nbthread;
diff -ruN ./include/types/log.h ../haproxy-1.8.7-70bd7a-1/include/types/log.h
--- ./include/types/log.h	2018-04-07 06:30:56.000000000 +0800
+++ ../haproxy-1.8.7-70bd7a-1/include/types/log.h	2018-04-09 16:26:50.000000000 +0800
@@ -62,6 +62,8 @@
 	LOG_FMT_SERVERPORT,
 	LOG_FMT_SERVERIP,
 	LOG_FMT_COUNTER,
+	LOG_FMT_LINSTANCEID,
+	LOG_FMT_SINSTANCEID,
 	LOG_FMT_LOGCNT,
 	LOG_FMT_PID,
 	LOG_FMT_DATE,
diff -ruN ./src/haproxy.c ../haproxy-1.8.7-70bd7a-1/src/haproxy.c
--- ./src/haproxy.c	2018-04-07 06:30:56.000000000 +0800
+++ ../haproxy-1.8.7-70bd7a-1/src/haproxy.c	2018-04-09 16:30:15.000000000 +0800
@@ -126,6 +126,7 @@
 
 /* global options */
 struct global global = {
+	.riid = 0,
 	.hard_stop_after = TICK_ETERNITY,
 	.nbproc = 1,
 	.nbthread = 1,
@@ -1260,6 +1261,34 @@
 	return newargv;
 }
 
+/* update global.riid with 4 random() long */
+static void update_riid()
+{
+	int fd, i = -1;
+	char buf[8];
+	fd = open("/dev/urandom", O_RDONLY, 0);
+	if (fd < 0) {
+		ha_alert("failed to open /dev/urandom.\n");
+		goto failed;
+	}
+	if (8 != read(fd, buf, 8)) {
+		ha_alert("failed to read /dev/urandom.\n");
+		close(fd);
+		goto failed;
+	}
+
+	global.riid = 0;
+	for (i = 0; i < 8; i ++) {
+		global.riid = (global.riid<<8) + buf[i];
+	}
+
+	close(fd);
+	return;
+failed:
+	global.riid = getpid() + (unsigned long)(random() + (random() << 16) + (random() << 32) + (random() << 48));
+    return;
+}
+
 /*
  * This function initializes all the necessary variables. It only returns
  * if everything is OK. If something fails, it exits.
@@ -1312,6 +1341,8 @@
 
 	srandom(now_ms - getpid());
 
+	update_riid();
+
 	init_log();
 	signal_init();
 	if (init_acl() != 0)
@@ -2767,6 +2798,8 @@
 			/* parent leave to daemonize */
 			if (ret > 0)
 				exit(0);
+			/* update riid of child */
+			update_riid();
 		}
 
 		if (global.mode & MODE_MWORKER) {
@@ -2813,8 +2846,12 @@
 				protocol_unbind_all();
 				exit(1); /* there has been an error */
 			}
-			else if (ret == 0) /* child breaks here */
+			else if (ret == 0) {
+				/* update riid of child */
+				update_riid();
+				/* child breaks here */
 				break;
+			}
 			children[proc] = ret;
 			if (pidfd >= 0 && !(global.mode & MODE_MWORKER)) {
 				char pidstr[100];
diff -ruN ./src/log.c ../haproxy-1.8.7-70bd7a-1/src/log.c
--- ./src/log.c	2018-04-07 06:30:56.000000000 +0800
+++ ../haproxy-1.8.7-70bd7a-1/src/log.c	2018-04-09 16:26:50.000000000 +0800
@@ -124,6 +124,8 @@
 	{ "CC", LOG_FMT_CCLIENT, PR_MODE_HTTP, LW_REQHDR, NULL },  /* client cookie */
 	{ "CS", LOG_FMT_CSERVER, PR_MODE_HTTP, LW_RSPHDR, NULL },  /* server cookie */
 	{ "H", LOG_FMT_HOSTNAME, PR_MODE_TCP, LW_INIT, NULL }, /* Hostname */
+	{ "riid", LOG_FMT_LINSTANCEID, PR_MODE_TCP, LW_INIT, NULL }, /* random generated instance id */
+	{ "siid", LOG_FMT_SINSTANCEID, PR_MODE_TCP, LW_INIT, NULL }, /* short random generated instance id */
 	{ "ID", LOG_FMT_UNIQUEID, PR_MODE_HTTP, LW_BYTES, NULL }, /* Unique ID */
 	{ "ST", LOG_FMT_STATUS, PR_MODE_TCP, LW_RESP, NULL },   /* status code */
 	{ "T", LOG_FMT_DATEGMT, PR_MODE_TCP, LW_INIT, NULL },   /* date GMT */
@@ -2276,7 +2278,7 @@
 
 			case LOG_FMT_COUNTER: // %rt
 				if (tmp->options & LOG_OPT_HEXA) {
-					iret = snprintf(tmplog, dst + maxsize - tmplog, "%04X", s->uniq_id);
+					iret = snprintf(tmplog, dst + maxsize - tmplog, "%08X", s->uniq_id);
 					if (iret < 0 || iret > dst + maxsize - tmplog)
 						goto out;
 					last_isspace = 0;
@@ -2315,6 +2317,38 @@
 				last_isspace = 0;
 				break;
 
+			case LOG_FMT_LINSTANCEID: // %riid
+				if (tmp->options & LOG_OPT_HEXA) {
+					iret = snprintf(tmplog, dst + maxsize - tmplog, "%016lX", global.riid);
+					if (iret < 0 || iret > dst + maxsize - tmplog)
+						goto out;
+					last_isspace = 0;
+					tmplog += iret;
+				} else {
+					ret = ultoa_o(global.riid, tmplog, dst + maxsize - tmplog);
+					if (ret == NULL)
+						goto out;
+					tmplog = ret;
+					last_isspace = 0;
+				}
+				break;
+
+			case LOG_FMT_SINSTANCEID: // %siid
+				if (tmp->options & LOG_OPT_HEXA) {
+					iret = snprintf(tmplog, dst + maxsize - tmplog, "%08X", (unsigned int)global.riid);
+					if (iret < 0 || iret > dst + maxsize - tmplog)
+						goto out;
+					last_isspace = 0;
+					tmplog += iret;
+				} else {
+					ret = ultoa_o((unsigned int)global.riid, tmplog, dst + maxsize - tmplog);
+					if (ret == NULL)
+						goto out;
+					tmplog = ret;
+					last_isspace = 0;
+				}
+				break;
+
 			case LOG_FMT_PID: // %pid
 				if (tmp->options & LOG_OPT_HEXA) {
 					iret = snprintf(tmplog, dst + maxsize - tmplog, "%04X", pid);
